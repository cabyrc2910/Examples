// ============= Вид 1  Методы которые ничего не возвращают и ничего не принимают
void Method1() 
{
    Console.WriteLine("Автор...");      // Тело метода которое что то показыват на экран
}
Method1();                              // Вызов метода   "Идентификатор метода и // Вид 2  Методы которые ничего но могут принимать какие то аргументы
void Method2(string msg)                // void, идентификатор Method2 и какое то кол-во аргументов string msg
{
    Console.WriteLine(msg);             // Тело метода которое показыват на экран сообщение  msg
}
Method2(msg: "Текст сообщения");        // Вызов метода   "Идентификатор метода и (текст)"



void Method21(string msg, int count) // 
{
    int i = 0;    // Значение переменной count для того что бы показывать на экране определённое количество сообщений "msg" которые будут передоваться в наш метод
    while (i > count)
    {
        Console.WriteLine(msg);
        i ++;                     // Инкремент - увеличение счётчика на +1, Декримент - уменьшение на -1
    }
}
// Method21("Текст", 4);         // Вызов метода  путём указания аргументов"текст", сколько раз вывести "4"
Method21(msg:"Текст", count: 4); // Явно указываем какому аргументу какое значение хотим присвоить


 
// ============= Вид 3  Методы которые что то возвращают но ничего не принимают
// Если метод что то возвращают то нужно указать тип данных значение которых ожидаем
int  Method3() // метод 3, аргументы никакие он не принимает
{
    return DataTime.Now.Year;   // Оператор "return"
}

int year = Method3(); // Чтобы вызвать метод, нужно указать имя Method3(), идентификатор переменной "year" через идентификатор присваиваивания положить нужное значение
Console.WriteLine(year);       // В дальнейшем использовать эту переиенную и то значение которое вернул метод



// ============= Вид 4  Методы которые что то принимают и что то возвращают   Цикл "while"
// Если метод что то возвращают то нужно указать тип данных значение которых ожидаем
string Method4 (int count, string text)
{
    int i = 0;                       // берём для начала цикл
    string result = string.Empty;  // переменная куда будем класть конечный результат = "" изначально выходит пустой строкой

    while (i < count)
    {
        result = result + text;
        i ++;                       // увеличиваем счётчик
    }
    return result;                  // указываем то значение которое хотим получить из метода
}    

string res = Method4(10, "z");       // Чтобы вызвать метод, нужно указать имя Method4(), указать значение 10 и текст "z"
Console.WriteLine(res);



// ============= Вид 4.1  Цикл "for"
string Method4 (int count, string text)
{
    string result = string.Empty;            
    for (int i = 0; i < count; i ++)  // пишем цикл "for", инициализируем счётчик; проверяем условие; увеличиваем счётчик (инкремент)
    {
        result = result + text;             
    }
    return result;                    // указываем то значение которое хотим получить из метода
}    

string res = Method4(10, "z");          
Console.WriteLine(res);



//============= Таблица умножения  (использование цикла внутри цикла)
for (int i = 2; i <= 10; i ++)     // указываем внешний цикл for, Указываем начальное значение таблицы 2; пока  счётчик  меньше 10 будем его увеличивать 
{
    for (int j = 2; i <= 10; i ++) // указываем внутренний цикл for, Указываем начальное значение таблицы 2; пока  счётчик  меньше 10 будем его увеличивать
    {
        Console.WriteLine( $"{i} * {j} = {i * j}"); // телом  2 цикла указываем произведение (интерполяция строк)
    } 
     Console.WriteLine();                           // для вывода по отдельным столбикам, делаем переход на новую строку
}



// =========Работа с текстом
// Дан текст. В текстке нужно все пробелы заменить чёрточками, маленькие буквы "к" заменить большики "К", а большие "С" заменить маленькики"с"
// Ясна ли задача ?

string text = " - Я Думаю, - скавзал князь, улыбаясь, - что,"
            + "ежели бы вас послали вместо нашего милого Винценгероде,"
            + "вы бы взяли приступом согласие прусского короля."
            + "Вы так красноречивы. Вы дадите мне чаю";

// string s = "qwerty"
//             012
// s[3]  // r

string Replace(string text, char oldValue, char newValue)  //Входной text, указываем символ oldValue, и  на который будем менять newValue
{
    string result = String.Empty; // Заводим новую строку result, переменная куда будем класть конечный результат = "" изначально выходит пустой строкой

    int length = text.Length;            // устонавливаем длину строки (количество символов)  "qwerty" = 6
    for(int i = 0; i < length; i ++)    // проходим от нулевого символа до конца строки
    {
        if(text[i] == oldValue) result = result + $"{newValue}"; // Если текущий символ совпал с тем который хотим заменить то в result надо положить новое значение в виде строки ewValue
        else result = result + $"{text[i]}"; //Если совпадений не обнаружено то в result надо добавить текущий символ который и был
    }
    return result;  // возвращаем результат
}
string newText = Replace(text, ' ','|'); // указываем что на что меняем (пробелы на чёрточки)

Console.WriteLine(newText);
Console.WriteLine();                     // разделяем каждый вывод пустой строкой
newText = Replace(newText, 'к','К');     // указываем что на что меняем ('к'на'К')
Console.WriteLine(newText);



// ============= функции в програмировании
// 1 Найти позицию минимао=льного злемента в неотсортированной  части массива
// 2. Произвести обмен этого значения  со значением первой неотсортированной позиции
// 3. Повторять пока есть неотсортированные элементы
// Пример   12463578   ==  12345678   (от минимального к максимальному)

int[] arr = { 1,5,4,3,2,6,7,1,1 };    // заводим массив который будем отсортировывать

void PrintArray(int[] array)         // Метод void  в качестве аргумента приходит массив аrray
{
   int count = array.Length          // Получение количества элементов будут иметь разные наименования Length

   for (int i = 0; i < count; i ++)  // цикл for в котором проходим по всем элементам массива
   {
       Console.Write($"{array[i]}"); // Показываем на экране делаем чтобы выво был в 1 строку
   }
   Console.WriteLine();              // Выводим пустую строку
}

void SelectionSort(int[] array)       // Пишем метод который будет упорядочивать массив
{
    for ( int i = i; i < array.Length - 1; i ++)
    {
        int minPosition = i;           // определяем ту позицию на которую смотрим

        for (int j = i + 1; j < array.Length; j ++)  // начальная позиция от которой начинаем действия по сортировке i + 1
        {
            if(array[j] < array [minPosition]) minPosition = j;  // ищем минимальный элемент (если текущий меньше элемента предплолагаемого на минимальной позиции то эту позицию нужно сохранить)
        }

        int temporary = array [i];
        array [i] = array[minPosition];   // в позицию длолжны положить тот элемент который будет найден в процессе ненаписанного кода (обмен двух переменных местами)
        array[minPosition] = temporary;    // кладём тот элемент которыйц был временным 
    }
}

PrintArray(arr);
SelectionSort(arr);                        //Упорядочивание массива
PrintArray(arr);